#!/usr/bin/env python3
"""
Copyright 2025 Netskope, Inc.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Written by Leandro FrÃ³es
Description: Script used to deobfuscate the shellcode used to load and execute the LegionLoader payload.
"""

import struct
import argparse

def generate_dwords(first_dword: int, second_dword: int) -> tuple[int, int]:
    key_array = [0x581F334E, 0xB09FDD09, 0x1D9A2C1E, 0x8046E8A6]
    limit = 0x2f

    for j in range(limit, -1, -1):
        new_dword = ((first_dword << 6) ^ (first_dword >> 8)) & 0xffffffff
        current_key = key_array[(limit - j) % len(key_array)]
        final_dword = (current_key + new_dword + first_dword + j) & 0xffffffff
        first_dword_result = (second_dword - final_dword) & 0xffffffff
        second_dword = first_dword
        first_dword = first_dword_result
    
    return first_dword_result, second_dword

def main():
    parser = argparse.ArgumentParser()
    parser = argparse.ArgumentParser(description="Script used to deobfuscate the shellcode that executes LegionLoader.")
    parser.add_argument("-f", "--file", help="Path to the obfuscated shellcode file.")
    args = parser.parse_args()

    with open(args.file, "rb") as f:
        shellcode_buffer = bytearray(f.read())

    # The operations happen every 8 bytes
    for i in range(0, len(shellcode_buffer), 8):
        first_dword = struct.unpack("<I", shellcode_buffer[i:i+4])[0] & 0xffffffff
        second_dword = struct.unpack("<I", shellcode_buffer[i+4:i+8])[0] & 0xffffffff
        
        result_first_dword, result_second_dword = generate_dwords(first_dword, second_dword)

        # Set the deobfuscated chunk (8 bytes) to the array
        result_first_dword = bytearray(struct.pack("<I", result_first_dword))

        for y, byte in enumerate(result_first_dword):
            shellcode_buffer[i+y] = byte
            
        result_second_dword = bytearray(struct.pack("<I", result_second_dword))
        
        for y, byte in enumerate(result_second_dword):
            shellcode_buffer[i+y+4] = byte

    # Write the deobfuscated content to a new file
    with open("dec_result.bin", "wb") as f:
        f.write(shellcode_buffer)

if __name__ == '__main__':
    main()